#include "options_parser_subjoin.h"
options_parser_subjoin::options_parser_subjoin() = default;


bool options_parser_subjoin::parse( int argc, char ***argv, options *opts )
{
    options_subjoin *opts_subjoin = (options_subjoin*) opts;
    namespace po = boost::program_options;
    po::variables_map vm;


    po::options_description desc( "PepSIRF: Peptide-based Serological Immune "
                                  "Response Framework subjoin module"
                                );

    desc.add_options()
        (
         "help,h", "Produce help message\n"
        )
        ( "names_list", po::value<std::string>( &opts_subjoin->names_list_fname )->required(),
          "The name of the file containing the names of the peptides to include, one per line."
          "Each of the peptides in this list should be a row in the matrix provided in the "
          "--scores argument. \n"
        )
        (
         "scores", po::value<std::string>( &opts_subjoin->in_matrix_fname )->required(),
         "The name of the file containing scores for peptides. This should be a matrix peptide name row "
         "labels and samplenames for column labels. Most probably this will be the output generated by "
         "the normalize or demux modules.\n"
        )
        (
         "output", po::value<std::string>( &opts_subjoin->out_matrix_fname )->default_value( "subjoin_output.tsv" ),
         "The name of the file to write output scores to. The output will be in the form of the input, but with only the "
         "peptides found in the namelists. \n"
        )
        ;


    po::store( po::command_line_parser( argc, *argv ).options( desc ).run(), vm);

    if( vm.count( "help" ) 
	    || argc == 2 
	  )
        {
            std::cout << desc << std::endl;
            return false;
        }
    else
        {
            po::notify( vm );
            return true;
        }

}
